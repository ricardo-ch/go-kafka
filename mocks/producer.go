// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// MockProducer is an autogenerated mock type for the Producer type
type MockProducer struct {
	mock.Mock
}

type MockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducer) EXPECT() *MockProducer_Expecter {
	return &MockProducer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockProducer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProducer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockProducer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockProducer_Expecter) Close() *MockProducer_Close_Call {
	return &MockProducer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockProducer_Close_Call) Run(run func()) *MockProducer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProducer_Close_Call) Return(_a0 error) *MockProducer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducer_Close_Call) RunAndReturn(run func() error) *MockProducer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Produce provides a mock function with given fields: msg
func (_m *MockProducer) Produce(msg *sarama.ProducerMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sarama.ProducerMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProducer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type MockProducer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - msg *sarama.ProducerMessage
func (_e *MockProducer_Expecter) Produce(msg interface{}) *MockProducer_Produce_Call {
	return &MockProducer_Produce_Call{Call: _e.mock.On("Produce", msg)}
}

func (_c *MockProducer_Produce_Call) Run(run func(msg *sarama.ProducerMessage)) *MockProducer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sarama.ProducerMessage))
	})
	return _c
}

func (_c *MockProducer_Produce_Call) Return(_a0 error) *MockProducer_Produce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducer_Produce_Call) RunAndReturn(run func(*sarama.ProducerMessage) error) *MockProducer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProducer creates a new instance of MockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducer {
	mock := &MockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
