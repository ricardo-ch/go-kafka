// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	sarama "github.com/Shopify/sarama"
	mock "github.com/stretchr/testify/mock"
)

// SyncProducer is an autogenerated mock type for the SyncProducer type
type SyncProducer struct {
	mock.Mock
}

// AbortTxn provides a mock function with given fields:
func (_m *SyncProducer) AbortTxn() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMessageToTxn provides a mock function with given fields: msg, groupId, metadata
func (_m *SyncProducer) AddMessageToTxn(msg *sarama.ConsumerMessage, groupId string, metadata *string) error {
	ret := _m.Called(msg, groupId, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sarama.ConsumerMessage, string, *string) error); ok {
		r0 = rf(msg, groupId, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOffsetsToTxn provides a mock function with given fields: offsets, groupId
func (_m *SyncProducer) AddOffsetsToTxn(offsets map[string][]*sarama.PartitionOffsetMetadata, groupId string) error {
	ret := _m.Called(offsets, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string][]*sarama.PartitionOffsetMetadata, string) error); ok {
		r0 = rf(offsets, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeginTxn provides a mock function with given fields:
func (_m *SyncProducer) BeginTxn() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *SyncProducer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitTxn provides a mock function with given fields:
func (_m *SyncProducer) CommitTxn() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsTransactional provides a mock function with given fields:
func (_m *SyncProducer) IsTransactional() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendMessage provides a mock function with given fields: msg
func (_m *SyncProducer) SendMessage(msg *sarama.ProducerMessage) (int32, int64, error) {
	ret := _m.Called(msg)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*sarama.ProducerMessage) int32); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*sarama.ProducerMessage) int64); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*sarama.ProducerMessage) error); ok {
		r2 = rf(msg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SendMessages provides a mock function with given fields: msgs
func (_m *SyncProducer) SendMessages(msgs []*sarama.ProducerMessage) error {
	ret := _m.Called(msgs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*sarama.ProducerMessage) error); ok {
		r0 = rf(msgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxnStatus provides a mock function with given fields:
func (_m *SyncProducer) TxnStatus() sarama.ProducerTxnStatusFlag {
	ret := _m.Called()

	var r0 sarama.ProducerTxnStatusFlag
	if rf, ok := ret.Get(0).(func() sarama.ProducerTxnStatusFlag); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sarama.ProducerTxnStatusFlag)
	}

	return r0
}

type mockConstructorTestingTNewSyncProducer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSyncProducer creates a new instance of SyncProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSyncProducer(t mockConstructorTestingTNewSyncProducer) *SyncProducer {
	mock := &SyncProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
