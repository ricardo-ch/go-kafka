// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	sarama "github.com/Shopify/sarama"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerGroupHandler is an autogenerated mock type for the ConsumerGroupHandler type
type ConsumerGroupHandler struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: _a0
func (_m *ConsumerGroupHandler) Cleanup(_a0 sarama.ConsumerGroupSession) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumeClaim provides a mock function with given fields: _a0, _a1
func (_m *ConsumerGroupHandler) ConsumeClaim(_a0 sarama.ConsumerGroupSession, _a1 sarama.ConsumerGroupClaim) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession, sarama.ConsumerGroupClaim) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: _a0
func (_m *ConsumerGroupHandler) Setup(_a0 sarama.ConsumerGroupSession) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConsumerGroupHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumerGroupHandler creates a new instance of ConsumerGroupHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerGroupHandler(t mockConstructorTestingTNewConsumerGroupHandler) *ConsumerGroupHandler {
	mock := &ConsumerGroupHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
